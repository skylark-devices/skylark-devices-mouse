{"version":3,"sources":["skylark-devices-points-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","points","mouse","mouseWheelEvent","document","createElement","undefined","onmousewheel","normalizeWheel","event","sX","sY","pX","pY","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","touch","isTouchEnabled","Promise","resolve","listener","e","window","removeEventListener","addEventListener","setTimeout"],"mappings":";;;;;;;g4BAAAA,EAAA,8BAAA,WACA,OAAA,SAAAC,EAAAC,EAAAC,GACA,iBAAAD,IACAA,EAAAA,EAAAE,MAAA,MAOA,IALA,IAAAC,EAAAH,EAAAG,OACAC,EAAAL,EACAM,EAAA,EACAC,EAAAN,EAAAK,KAEAA,EAAAF,GACAC,EAAAA,EAAAE,GAAAF,EAAAE,OACAA,EAAAN,EAAAK,KAGA,OAAAD,EAAAE,GAAAL,KAGAH,EAAA,uBACA,aACA,SAAAS,GACA,IAAAC,GACAC,OAAA,SAAAT,EAAAU,GACA,OAAAH,EAAAC,EAAAR,EAAAU,KAGA,OAAAF,IAGAV,EAAA,yBACA,QACA,SAAAU,GACA,OAAAA,IAEAV,EAAA,oBAAA,yBAAA,SAAAa,GAAA,OAAAA,IAEAb,EAAA,iCACA,oBACA,SAAAU,GACA,OAAAA,EAAAC,OAAA,uBAEAX,EAAA,gCACA,YACA,SAAAc,GA2DA,OAAAA,EAAAC,OACAC,gBAhEA,WACA,MAAA,YAAAC,SAAAC,cAAA,OAAA,aACAC,IAAAF,SAAAG,aAAA,aACA,kBA8DAC,eAnDA,SAAAC,GACA,IAIAC,EAAA,EAAAC,EAAA,EACAC,EAAA,EAAAC,EAAA,EAGA,WAAAJ,IAAAE,EAAAF,EAAAK,QACA,eAAAL,IAAAE,GAAAF,EAAAM,WAAA,KACA,gBAAAN,IAAAE,GAAAF,EAAAO,YAAA,KACA,gBAAAP,IAAAC,GAAAD,EAAAQ,YAAA,KAGA,SAAAR,GAAAA,EAAAS,OAAAT,EAAAU,kBACAT,EAAAC,EACAA,EAAA,GAGAC,EAnBA,GAmBAF,EACAG,EApBA,GAoBAF,EAEA,WAAAF,IAAAI,EAAAJ,EAAAW,QACA,WAAAX,IAAAG,EAAAH,EAAAY,SAEAT,GAAAC,IAAAJ,EAAAa,YACA,IAAAb,EAAAa,WACAV,GA1BA,GA2BAC,GA3BA,KA8BAD,GA7BA,IA8BAC,GA9BA,MAmCAD,IAAAF,IAAAA,EAAAE,EAAA,GAAA,EAAA,GACAC,IAAAF,IAAAA,EAAAE,EAAA,GAAA,EAAA,GAEA,OACAU,MAAAb,EACAc,MAAAb,EACAc,OAAAb,EACAc,OAAAb,OASA1B,EAAA,gCACA,YACA,SAAAc,GA0BA,OAAAA,EAAA0B,OACAC,eArBA,WACA,OAAA,IAAAC,QAAA,SAAAC,GACA,IAAAC,EAAA,SAAAC,GAEAF,IADAE,GAOAC,OAAAC,oBAAA,aAAAH,IAGAE,OAAAE,iBAAA,aAAAJ,GAAA,GAGAK,WAAAL,EAAA,WASA5C,EAAA,+BACA,WACA,UACA,WACA,SAAAc,GACA,OAAAA,IAEAd,EAAA,0BAAA,+BAAA,SAAAa,GAAA,OAAAA","file":"../skylark-devices-points-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-devices-points/points',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"devices.points\",{});\r\n});\ndefine('skylark-devices-points/mouse',[\r\n\t\"./points\"\r\n],function(points){\r\n\t/**\r\n\t * Function: isMouseEvent\r\n\t * \r\n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\r\n\t */\r\n\tfunction isMouseEvent(evt) \t{\r\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\r\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\r\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isLeftMouseButton\r\n\t * \r\n\t * Returns true if the left mouse button is pressed for the given event.\r\n\t * To check if a button is pressed during a mouseMove you should use the\r\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\r\n\t * for control+left-click on the Mac.\r\n\t */\r\n\tfunction isLeftMouseButton(evt) {\r\n\t\t// Special case for mousemove and mousedown we check the buttons\r\n\t\t// if it exists because which is 0 even if no button is pressed\r\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\r\n\t\t{\r\n\t\t\treturn evt.buttons == 1;\r\n\t\t}\r\n\t\telse if ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 1;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 1;\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isMiddleMouseButton\r\n\t * \r\n\t * Returns true if the middle mouse button is pressed for the given event.\r\n\t * To check if a button is pressed during a mouseMove you should use the\r\n\t * <mxGraph.isMouseDown> property.\r\n\t */\r\n\tfunction isMiddleMouseButton(evt) {\r\n\t\tif ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 2;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 4;\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isRightMouseButton\r\n\t * \r\n\t * Returns true if the right mouse button was pressed. Note that this\r\n\t * button might not be available on some systems. For handling a popup\r\n\t * trigger <isPopupTrigger> should be used.\r\n\t */\r\n\tfunction isRightMouseButton(evt){\r\n\t\tif ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 3;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 2;\r\n\t    }\r\n\t}\r\n\r\n  /**\r\n   * @summary Gets the event name for mouse wheel\r\n   * @returns {string}\r\n   */\r\n  function mouseWheelEvent() {\r\n    return 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support \"wheel\"\r\n      document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \"mousewheel\"\r\n        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\r\n  };\r\n\r\n  /**\r\n   * @summary Normalize mousewheel values accross browsers\r\n   * @description From Facebook's Fixed Data Table\r\n   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}\r\n   * @copyright Facebook\r\n   * @param {MouseWheelEvent} event\r\n   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}\r\n   */\r\n  function normalizeWheel(event) {\r\n    var PIXEL_STEP  = 10;\r\n    var LINE_HEIGHT = 40;\r\n    var PAGE_HEIGHT = 800;\r\n\r\n    var sX = 0, sY = 0; // spinX, spinY\r\n    var pX = 0, pY = 0; // pixelX, pixelY\r\n\r\n    // Legacy\r\n    if ('detail'      in event) { sY = event.detail; }\r\n    if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }\r\n    if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }\r\n    if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }\r\n\r\n    // side scrolling on FF with DOMMouseScroll\r\n    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\r\n      sX = sY;\r\n      sY = 0;\r\n    }\r\n\r\n    pX = sX * PIXEL_STEP;\r\n    pY = sY * PIXEL_STEP;\r\n\r\n    if ('deltaY' in event) { pY = event.deltaY; }\r\n    if ('deltaX' in event) { pX = event.deltaX; }\r\n\r\n    if ((pX || pY) && event.deltaMode) {\r\n      if (event.deltaMode === 1) { // delta in LINE units\r\n        pX *= LINE_HEIGHT;\r\n        pY *= LINE_HEIGHT;\r\n      }\r\n      else {                      // delta in PAGE units\r\n        pX *= PAGE_HEIGHT;\r\n        pY *= PAGE_HEIGHT;\r\n      }\r\n    }\r\n\r\n    // Fall-back if spin cannot be determined\r\n    if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }\r\n    if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }\r\n\r\n    return {\r\n      spinX: sX,\r\n      spinY: sY,\r\n      pixelX: pX,\r\n      pixelY: pY\r\n    };\r\n  };\r\n\r\n\treturn points.mouse = {\r\n\t\tmouseWheelEvent,\r\n\t\tnormalizeWheel\r\n\t};\r\n});\ndefine('skylark-devices-points/touch',[\r\n\t\"./points\"\r\n],function(points){\r\n\r\n  /**\r\n   * @summary Detects if the user is using a touch screen\r\n   * @returns {Promise<boolean>}\r\n   */\r\n   function isTouchEnabled () {\r\n    return new Promise(function(resolve) {\r\n      var listener = function(e) {\r\n        if (e) {\r\n          resolve(true);\r\n        }\r\n        else {\r\n          resolve(false);\r\n        }\r\n\r\n        window.removeEventListener('touchstart', listener);\r\n      };\r\n\r\n      window.addEventListener('touchstart', listener, false);\r\n\r\n      // after 10 secs auto-reject the promise\r\n      setTimeout(listener, 10000);\r\n    });\r\n  };\r\n\r\n  return points.touch = {\r\n  \tisTouchEnabled\r\n  };\r\n\t\r\n});\ndefine('skylark-devices-points/main',[\r\n\t\"./points\",\r\n\t\"./mouse\",\r\n\t\"./touch\"\r\n],function(points){\r\n\treturn points;\r\n});\ndefine('skylark-devices-points', ['skylark-devices-points/main'], function (main) { return main; });\n\n"]}